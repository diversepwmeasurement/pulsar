concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}${{ github.event_name
    == 'workflow_dispatch' && github.event.inputs.jdk_major_version || '' }}
env:
  ARTIFACT_RETENTION_DAYS: 3
  JDK_DISTRIBUTION: corretto
  MAVEN_OPTS: -Xss1500k -Xmx1500m -Daether.connector.http.reuseConnections=false -Daether.connector.requestTimeout=60000
    -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard
    -Dmaven.wagon.http.retryHandler.count=3 -Dmaven.wagon.http.retryHandler.requestSentEnabled=true
    -Dmaven.wagon.http.serviceUnavailableRetryStrategy.class=standard -Dmaven.wagon.rto=60000
jobs:
  build-and-license-check:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
      JOB_NAME: Build and License check
    if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
    name: Build and License check
    needs: preconditions
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Cache local Maven repository
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles('**/pom.xml')
          }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Check source code license headers
      run: mvn -B -T 8 -ntp initialize apache-rat:check license:check
    - continue-on-error: true
      name: Check source code style
      run: mvn -B -T 8 -ntp initialize checkstyle:check
    - continue-on-error: true
      name: Build core-modules
      run: 'mvn -B -T 1C -ntp -Pcore-modules,-main clean install -DskipTests -Dlicense.skip=true
        -Drat.skip=true -Dcheckstyle.skip=true

        '
    - continue-on-error: true
      name: Check binary licenses
      run: src/check-binary-license.sh ./distribution/server/target/apache-pulsar-*-bin.tar.gz
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Save maven build results to Github artifact cache so that the results
        can be reused
      run: "cd $HOME\n$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh store_tar_to_github_actions_artifacts\
        \ pulsar-maven-repository-binaries \\\ntar --exclude '.m2/repository/org/apache/pulsar/pulsar-*-distribution'\
        \ \\\n    -I zstd -cf - .m2/repository/org/apache/pulsar\ncd $GITHUB_WORKSPACE\n\
        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh store_tar_to_github_actions_artifacts\
        \ pulsar-server-distribution \\\ntar -I zstd -cf - distribution/server/target/apache-pulsar-*-bin.tar.gz\n"
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    timeout-minutes: 60
  codeql:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      CODEQL_LANGUAGE: java-kotlin
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
    if: ${{ (needs.preconditions.outputs.java_non_tests == 'true' || github.event_name
      != 'pull_request') && ((github.event_name == 'pull_request' && github.base_ref
      == 'master') || (github.event_name != 'pull_request' && github.ref_name == 'master'))
      }}
    name: Run CodeQL Analysis
    needs:
    - preconditions
    - unit-tests
    permissions:
      actions: read
      contents: read
      security-events: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ matrix.clean_disk }}
      name: Clean Disk when needed
      uses: ./.github/actions/clean-disk
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Cache local Maven repository
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-all-${{ hashFiles('**/pom.xml') }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles(''**/pom.xml'')
          }}

          ${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ env.CODEQL_LANGUAGE }}
    - continue-on-error: true
      name: Build Java code
      run: 'mvn -B -ntp -Pcore-modules,-main install -DskipTests -Dlicense.skip=true
        -Drat.skip=true -Dcheckstyle.skip=true

        '
    - continue-on-error: true
      name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: /language:${{ env.CODEQL_LANGUAGE }}
    timeout-minutes: 60
  delete-integration-test-docker-image-artifact:
    if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
    name: Delete integration test docker image artifact
    needs:
    - preconditions
    - integration-tests
    - integration-tests-upload-coverage
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Delete docker image from GitHub Actions Artifacts
      run: 'gh-actions-artifact-client.js delete pulsar-java-test-image.zst

        '
    timeout-minutes: 10
  delete-system-test-docker-image-artifact:
    if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
    name: Delete system test docker image artifact
    needs:
    - preconditions
    - system-tests
    - system-tests-upload-coverage
    - flaky-system-tests
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Delete docker image from GitHub Actions Artifacts
      run: 'gh-actions-artifact-client.js delete pulsar-test-latest-version-image.zst

        '
    timeout-minutes: 10
  flaky-system-tests:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
      JOB_NAME: CI Flaky - System - ${{ matrix.name }}
      PULSAR_TEST_IMAGE_NAME: apachepulsar/pulsar-test-latest-version:latest
    if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
    name: CI Flaky - System - ${{ matrix.name }}
    needs:
    - preconditions
    - pulsar-test-latest-version-image
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ matrix.clean_disk }}
      name: Clean Disk when needed
      uses: ./.github/actions/clean-disk
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Cache local Maven repository
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-all-${{ hashFiles('**/pom.xml') }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles(''**/pom.xml'')
          }}

          ${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Restore maven build results from Github artifact cache
      run: 'cd $HOME

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_tar_from_github_actions_artifacts
        pulsar-maven-repository-binaries

        '
    - continue-on-error: true
      name: Load docker image apachepulsar/pulsar-test-latest-version:latest from
        Github artifact cache
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh docker_load_image_from_github_actions_artifacts
        pulsar-test-latest-version-image

        '
    - continue-on-error: true
      if: ${{ matrix.setup }}
      name: Run setup commands
      run: '${{ matrix.setup }}

        '
    - continue-on-error: true
      name: Run system test group '${{ matrix.group }}'
      run: './build/run_integration_group.sh ${{ matrix.group }}

        '
    - continue-on-error: true
      if: cancelled()
      name: print JVM thread dumps when cancelled
      run: $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh print_thread_dumps
    - continue-on-error: true
      if: ${{ always() }}
      name: Aggregates all test reports to ./test-reports and ./surefire-reports directories
      uses: ./.github/actions/copy-test-reports
    - continue-on-error: true
      if: ${{ always() }}
      name: Publish Test Report
      uses: apache/pulsar-test-infra/action-junit-report@master
      with:
        annotate_only: 'true'
        report_paths: test-reports/TEST-*.xml
    - continue-on-error: true
      if: ${{ !success() }}
      name: Upload container logs
      uses: actions/upload-artifact@v4
      with:
        name: System-${{ matrix.group }}-container-logs
        path: tests/integration/target/container-logs
        retention-days: 7
    - continue-on-error: true
      if: ${{ !success() }}
      name: Upload Surefire reports
      uses: actions/upload-artifact@v4
      with:
        name: System-${{ matrix.name }}-surefire-reports
        path: surefire-reports
        retention-days: 7
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    strategy:
      fail-fast: false
      matrix:
        include:
        - group: PLUGIN
          name: Plugin
        - clean_disk: true
          group: PULSAR_IO_ORA
          name: Pulsar IO - Oracle
    timeout-minutes: 60
  integration-tests:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
      JOB_NAME: CI - Integration - ${{ matrix.name }}
      PULSAR_TEST_IMAGE_NAME: apachepulsar/java-test-image:latest
    if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
    name: CI - Integration - ${{ matrix.name }}
    needs:
    - preconditions
    - pulsar-java-test-image
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Cache Maven dependencies
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles('**/pom.xml')
          }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Restore maven build results from Github artifact cache
      run: 'cd $HOME

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_tar_from_github_actions_artifacts
        pulsar-maven-repository-binaries

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh snapshot_pulsar_maven_artifacts

        '
    - continue-on-error: true
      name: Load docker image apachepulsar/java-test-image:latest from Github artifact
        cache
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh docker_load_image_from_github_actions_artifacts
        pulsar-java-test-image

        '
    - continue-on-error: true
      if: ${{ matrix.setup }}
      name: Run setup commands
      run: '${{ matrix.setup }}

        '
    - continue-on-error: true
      if: ${{ matrix.runtime_jdk }}
      name: Set up runtime JDK ${{ matrix.runtime_jdk }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ matrix.runtime_jdk }}
    - continue-on-error: true
      name: Run integration test group '${{ matrix.group }}'
      run: "if [[ \"${{ matrix.no_coverage }}\" != \"true\" && \"${{ needs.preconditions.outputs.collect_coverage\
        \ }}\" == \"true\" ]]; then\n  coverage_args=\"--coverage\"\nfi\n./build/run_integration_group.sh\
        \ ${{ matrix.group }} $coverage_args\n"
    - continue-on-error: true
      if: ${{ !matrix.no_coverage && needs.preconditions.outputs.collect_coverage
        == 'true' }}
      name: Upload coverage to build artifacts
      run: $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh upload_inttest_coverage_files
        ${{ matrix.group }}
    - continue-on-error: true
      if: cancelled()
      name: print JVM thread dumps when cancelled
      run: $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh print_thread_dumps
    - continue-on-error: true
      if: ${{ always() }}
      name: Aggregates all test reports to ./test-reports and ./surefire-reports directories
      uses: ./.github/actions/copy-test-reports
    - continue-on-error: true
      if: ${{ always() }}
      name: Publish Test Report
      uses: apache/pulsar-test-infra/action-junit-report@master
      with:
        annotate_only: 'true'
        report_paths: test-reports/TEST-*.xml
    - continue-on-error: true
      if: ${{ !success() }}
      name: Upload Surefire reports
      uses: actions/upload-artifact@v4
      with:
        name: Integration-${{ matrix.group }}-surefire-reports
        path: surefire-reports
        retention-days: 7
    - continue-on-error: true
      if: ${{ !success() }}
      name: Upload container logs
      uses: actions/upload-artifact@v4
      with:
        name: Integration-${{ matrix.group }}-container-logs
        path: tests/integration/target/container-logs
        retention-days: 7
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    strategy:
      fail-fast: false
      matrix:
        include:
        - group: BACKWARDS_COMPAT
          name: Backwards Compatibility
          no_coverage: true
        - group: CLI
          name: Cli
        - group: MESSAGING
          name: Messaging
        - group: LOADBALANCE
          name: LoadBalance
          no_coverage: true
        - group: SHADE_RUN
          name: Shade on Java 8
          no_coverage: true
          runtime_jdk: 8
          setup: ./build/run_integration_group.sh SHADE_BUILD
        - group: SHADE_RUN
          name: Shade on Java 11
          no_coverage: true
          runtime_jdk: 11
          setup: ./build/run_integration_group.sh SHADE_BUILD
        - group: SHADE_RUN
          name: Shade on Java 17
          no_coverage: true
          runtime_jdk: 17
          setup: ./build/run_integration_group.sh SHADE_BUILD
        - group: SHADE_RUN
          name: Shade on Java 21
          no_coverage: true
          runtime_jdk: 21
          setup: ./build/run_integration_group.sh SHADE_BUILD
        - group: STANDALONE
          name: Standalone
        - group: TRANSACTION
          name: Transaction
        - group: METRICS
          name: Metrics
    timeout-minutes: ${{ matrix.timeout || 60 }}
  integration-tests-upload-coverage:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      PULSAR_TEST_IMAGE_NAME: apachepulsar/java-test-image:latest
    if: ${{ needs.preconditions.outputs.collect_coverage == 'true' }}
    name: CI - Integration - Upload Coverage
    needs:
    - preconditions
    - integration-tests
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Cache Maven dependencies
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles('**/pom.xml')
          }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Restore maven build results from Github artifact cache
      run: 'cd $HOME

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_tar_from_github_actions_artifacts
        pulsar-maven-repository-binaries

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh snapshot_pulsar_maven_artifacts

        '
    - continue-on-error: true
      name: Load docker image apachepulsar/java-test-image:latest from Github artifact
        cache
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh docker_load_image_from_github_actions_artifacts
        pulsar-java-test-image

        '
    - continue-on-error: true
      name: Restore coverage files from build artifacts and create Jacoco reports
      run: "$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_inttest_coverage_files\n\
        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh create_inttest_coverage_report \n\
        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh create_test_coverage_report\ncd\
        \ $GITHUB_WORKSPACE/target\nzip -qr jacoco_test_coverage_report_inttests.zip\
        \ jacoco_test_coverage_report jacoco_inttest_coverage_report || true\n"
    - continue-on-error: true
      name: Upload Jacoco report files to build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Jacoco-coverage-report-inttests
        path: target/jacoco_test_coverage_report_inttests.zip
        retention-days: 3
    - continue-on-error: true
      name: Upload to Codecov
      uses: ./.github/actions/upload-coverage
      with:
        flags: inttests
    - continue-on-error: true
      name: Delete coverage files from build artifacts
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh delete_inttest_coverage_files

        '
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    timeout-minutes: 30
  macos-build:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
    if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
    name: Build Pulsar on MacOS
    needs:
    - preconditions
    - integration-tests
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      name: Cache Maven dependencies
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-all-${{ hashFiles('**/pom.xml') }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-all-

          '
    - continue-on-error: true
      name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: build package
      run: mvn -B clean package -DskipTests -T 1C -ntp
    timeout-minutes: 120
  owasp-dep-check:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
      NIST_NVD_API_KEY: ${{ secrets.NIST_NVD_API_KEY }}
    if: ${{ needs.preconditions.outputs.need_owasp == 'true' }}
    name: OWASP dependency check
    needs:
    - preconditions
    - integration-tests
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Restore Maven repository cache
      timeout-minutes: 5
      uses: actions/cache/restore@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles('**/pom.xml')
          }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ matrix.jdk || env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ matrix.jdk || env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Clean Disk
      uses: ./.github/actions/clean-disk
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Restore maven build results from Github artifact cache
      run: 'cd $HOME

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_tar_from_github_actions_artifacts
        pulsar-maven-repository-binaries

        '
    - continue-on-error: true
      id: get-weeknum
      name: OWASP cache key weeknum
      run: 'echo "weeknum=$(date -u +"%Y-%U")" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      id: restore-owasp-dependency-check-data
      name: Restore OWASP Dependency Check data
      timeout-minutes: 5
      uses: actions/cache/restore@v4
      with:
        enableCrossOsArchive: true
        key: owasp-dependency-check-data-${{ steps.get-weeknum.outputs.weeknum }}
        path: ~/.m2/repository/org/owasp/dependency-check-data
        restore-keys: 'owasp-dependency-check-data-

          '
    - continue-on-error: true
      name: trigger dependency check
      run: "mvn -B -ntp verify -PskipDocker,skip-all,owasp-dependency-check -Dcheckstyle.skip=true\
        \ -DskipTests \\\n  -pl '!distribution/server,!distribution/io,!distribution/offloaders,!tiered-storage/file-system,!pulsar-io/flume,!pulsar-io/hbase,!pulsar-io/hdfs2,!pulsar-io/hdfs3,!pulsar-io/docs,!pulsar-io/jdbc/openmldb'\n"
    - continue-on-error: true
      if: ${{ cancelled() || failure() }}
      name: Upload report
      uses: actions/upload-artifact@v4
      with:
        name: dependency report
        path: target/dependency-check-report.html
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    timeout-minutes: 120
  preconditions:
    name: Preconditions
    outputs:
      changed_tests: ${{ steps.changes.outputs.tests_files }}
      collect_coverage: ${{ steps.check_coverage.outputs.collect_coverage }}
      docs_only: ${{ steps.check_changes.outputs.docs_only }}
      java_non_tests: ${{ steps.changes.outputs.java_non_tests }}
      jdk_major_version: ${{ steps.jdk_major_version.outputs.jdk_major_version }}
      need_owasp: ${{ steps.changes.outputs.need_owasp }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'schedule'
        }}
      name: Cancel scheduled jobs in forks by default
      uses: actions/github-script@v6
      with:
        script: 'await github.rest.actions.cancelWorkflowRun({owner: context.repo.owner,
          repo: context.repo.repo, run_id: context.runId});

          process.exit(1);

          '
    - continue-on-error: true
      id: jdk_major_version
      name: Select JDK major version
      run: "# use JDK 21 for the scheduled build with cron expression '0 6 * * *'\n\
        if [[ \"${{ github.event_name == 'schedule' && github.event.schedule == '0\
        \ 6 * * *' && 'true' || 'false' }}\" == \"true\" ]]; then\n  echo \"jdk_major_version=21\"\
        \ >> $GITHUB_OUTPUT\n  exit 0\nfi\n# use JDK 17 for build unless overridden\
        \ with workflow_dispatch input\necho \"jdk_major_version=${{ github.event_name\
        \ == 'workflow_dispatch' && github.event.inputs.jdk_major_version || '17'}}\"\
        \ >> $GITHUB_OUTPUT\n"
    - continue-on-error: true
      if: ${{ github.event_name == 'pull_request' }}
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      id: changes
      if: ${{ github.event_name == 'pull_request' }}
      name: Detect changed files
      uses: apache/pulsar-test-infra/paths-filter@master
      with:
        filters: .github/changes-filter.yaml
        list-files: csv
    - continue-on-error: true
      id: check_changes
      if: ${{ github.event_name == 'pull_request' }}
      name: Check changed files
      run: "if [[ \"${GITHUB_EVENT_NAME}\" != \"schedule\" && \"${GITHUB_EVENT_NAME}\"\
        \ != \"workflow_dispatch\" ]]; then\n  echo \"docs_only=${{ fromJSON(steps.changes.outputs.all_count)\
        \ == fromJSON(steps.changes.outputs.docs_count) && fromJSON(steps.changes.outputs.docs_count)\
        \ > 0 }}\" >> $GITHUB_OUTPUT\nelse\n  echo docs_only=false >> $GITHUB_OUTPUT\n\
        fi\n"
    - continue-on-error: true
      id: check_coverage
      name: Check if coverage should be collected
      run: "echo \"collect_coverage=${{ \n(steps.check_changes.outputs.docs_only !=\
        \ 'true' && github.event_name != 'workflow_dispatch' \n  && (github.base_ref\
        \ == 'master' || github.ref_name == 'master')) \n|| (github.event_name ==\
        \ 'workflow_dispatch' && github.event.inputs.collect_coverage == 'true')\n\
        }}\"  >> $GITHUB_OUTPUT\n"
    - continue-on-error: true
      env:
        GITHUB_RUN_ATTEMPT: ${{ github.run_attempt }}
        GITHUB_TOKEN: ${{ github.token }}
      if: ${{ steps.check_changes.outputs.docs_only != 'true' && github.repository
        == 'apache/pulsar' && github.event_name == 'pull_request' }}
      name: Check if the PR has been approved for testing
      run: 'build/pulsar_ci_tool.sh check_ready_to_test

        '
  pulsar-ci-checks-completed:
    if: ${{ always() && !(cancelled() && github.repository != 'apache/pulsar' && github.event_name
      == 'schedule') }}
    name: Pulsar CI checks completed
    needs:
    - preconditions
    - unit-tests
    - integration-tests
    - system-tests
    - flaky-system-tests
    - macos-build
    - unit-tests-upload-coverage
    - integration-tests-upload-coverage
    - system-tests-upload-coverage
    - owasp-dep-check
    - codeql
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      if: ${{ needs.preconditions.result != 'success' || needs.preconditions.outputs.docs_only
        != 'true'  }}
      name: Check that all required jobs were completed successfully
      run: "if [[ ! ( \\\n         \"${{ needs.preconditions.result }}\" == \"success\"\
        \ \\\n      && \"${{ needs.unit-tests.result }}\" == \"success\" \\\n    \
        \  && \"${{ needs.integration-tests.result }}\" == \"success\" \\\n      &&\
        \ \"${{ needs.system-tests.result }}\" == \"success\" \\\n      && \"${{ needs.macos-build.result\
        \ }}\" == \"success\" \\\n      && ( \"${{ needs.codeql.result }}\" == \"\
        success\" || \"${{ needs.codeql.result }}\" == \"skipped\" ) \\\n     ) ]];\
        \ then\n  echo \"Required jobs haven't been completed successfully.\"\n  exit\
        \ 1\nfi\n"
    - continue-on-error: true
      if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      if: ${{ needs.preconditions.outputs.docs_only != 'true' && !contains(needs.*.result,
        'failure') && !contains(needs.*.result, 'cancelled') }}
      name: Delete maven repository binaries from GitHub Actions Artifacts
      run: 'gh-actions-artifact-client.js delete pulsar-maven-repository-binaries.tar.zst
        || true

        gh-actions-artifact-client.js delete pulsar-server-distribution.tar.zst ||
        true'
    timeout-minutes: 10
  pulsar-java-test-image:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
      IMAGE_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
    if: ${{ needs.preconditions.outputs.docs_only != 'true'}}
    name: Build Pulsar java-test-image docker image
    needs:
    - preconditions
    - build-and-license-check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Cache Maven dependencies
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles('**/pom.xml')
          }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: restore maven build results from Github artifact cache
      run: 'cd $HOME

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_tar_from_github_actions_artifacts
        pulsar-maven-repository-binaries

        '
    - continue-on-error: true
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    - continue-on-error: true
      name: Build java-test-image docker image - ${{ matrix.platform }}
      run: '# build docker image

        DOCKER_CLI_EXPERIMENTAL=enabled mvn -B -am -pl docker/pulsar,tests/docker-images/java-test-image
        install -Pcore-modules,-main,integrationTests,docker \

        -Ddocker.platforms=${{ matrix.platform }} \

        -Dmaven.test.skip=true -DskipSourceReleaseAssembly=true \

        -Dspotbugs.skip=true  -Dlicense.skip=true -Dcheckstyle.skip=true -Drat.skip=true

        '
    - continue-on-error: true
      if: ${{ matrix.platform == 'linux/amd64' }}
      name: save docker image apachepulsar/java-test-image:latest to Github artifact
        cache
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh docker_save_image_to_github_actions_artifacts
        apachepulsar/java-test-image:latest pulsar-java-test-image

        '
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    strategy:
      fail-fast: false
      matrix:
        platform:
        - linux/amd64
        - linux/arm64
    timeout-minutes: 60
  pulsar-test-latest-version-image:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
      IMAGE_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
    if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
    name: Build Pulsar docker image
    needs:
    - preconditions
    - build-and-license-check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Clean Disk
      uses: ./.github/actions/clean-disk
      with:
        mode: full
    - continue-on-error: true
      name: Cache local Maven repository
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-all-${{ hashFiles('**/pom.xml') }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles(''**/pom.xml'')
          }}

          ${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: restore maven build results from Github artifact cache
      run: 'cd $HOME

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_tar_from_github_actions_artifacts
        pulsar-maven-repository-binaries

        '
    - continue-on-error: true
      name: Build latest-version-image docker image
      run: '# build docker image

        # include building of Connectors, Offloaders and server distros

        DOCKER_CLI_EXPERIMENTAL=enabled mvn -B -am -pl distribution/io,distribution/offloaders,distribution/server,distribution/shell,tests/docker-images/latest-version-image
        install \

        -Pmain,docker -Dmaven.test.skip=true \

        -Dspotbugs.skip=true -Dlicense.skip=true -Dcheckstyle.skip=true -Drat.skip=true

        '
    - continue-on-error: true
      name: Check binary licenses
      run: src/check-binary-license.sh ./distribution/server/target/apache-pulsar-*-bin.tar.gz
        && src/check-binary-license.sh ./distribution/shell/target/apache-pulsar-shell-*-bin.tar.gz
    - continue-on-error: true
      if: ${{ github.repository == 'apache/pulsar' && github.event_name != 'pull_request'
        }}
      name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        format: sarif
        image-ref: apachepulsar/pulsar:latest
        limit-severities-for-sarif: true
        output: trivy-results.sarif
        scanners: vuln
        severity: CRITICAL,HIGH,MEDIUM,LOW
    - continue-on-error: true
      if: ${{ github.repository == 'apache/pulsar' && github.event_name != 'pull_request'
        }}
      name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
    - continue-on-error: true
      name: Clean up disk space
      run: '# release disk space since saving docker image consumes local disk space

        #

        echo "::group::Available diskspace before cleaning"

        time df -BM / /mnt

        echo "::endgroup::"

        echo "::group::Clean build directory"

        # docker build changes some files to root ownership, fix this before deleting
        files

        sudo chown -R $USER:$GROUP .

        # clean build directories

        time git clean -fdx

        echo "::endgroup::"

        echo "::group::Available diskspace after cleaning build directory"

        time df -BM / /mnt

        echo "::endgroup::"

        echo "::group::Delete maven repository"

        # delete maven repository

        time rm -rf ~/.m2/repository

        echo "::endgroup::"

        echo "::group::Available diskspace after cleaning maven repository"

        time df -BM / /mnt

        echo "::endgroup::"

        '
    - continue-on-error: true
      name: save docker image apachepulsar/pulsar-test-latest-version:latest to Github
        artifact cache
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh docker_save_image_to_github_actions_artifacts
        apachepulsar/pulsar-test-latest-version:latest pulsar-test-latest-version-image

        '
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    timeout-minutes: 60
  system-tests:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
      JOB_NAME: CI - System - ${{ matrix.name }}
      PULSAR_TEST_IMAGE_NAME: apachepulsar/pulsar-test-latest-version:latest
    if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
    name: CI - System - ${{ matrix.name }}
    needs:
    - preconditions
    - pulsar-test-latest-version-image
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ matrix.clean_disk }}
      name: Clean Disk when needed
      uses: ./.github/actions/clean-disk
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Cache local Maven repository
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-all-${{ hashFiles('**/pom.xml') }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles(''**/pom.xml'')
          }}

          ${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Restore maven build results from Github artifact cache
      run: 'cd $HOME

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_tar_from_github_actions_artifacts
        pulsar-maven-repository-binaries

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh snapshot_pulsar_maven_artifacts

        '
    - continue-on-error: true
      name: Load docker image apachepulsar/pulsar-test-latest-version:latest from
        Github artifact cache
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh docker_load_image_from_github_actions_artifacts
        pulsar-test-latest-version-image

        '
    - continue-on-error: true
      if: ${{ matrix.setup }}
      name: Run setup commands
      run: '${{ matrix.setup }}

        '
    - continue-on-error: true
      name: Run system test group '${{ matrix.group }}'
      run: "if [[ \"${{ matrix.no_coverage }}\" != \"true\" && \"${{ needs.preconditions.outputs.collect_coverage\
        \ }}\" == \"true\" ]]; then\n  coverage_args=\"--coverage\"\nfi\n./build/run_integration_group.sh\
        \ ${{ matrix.group }} $coverage_args\n"
    - continue-on-error: true
      if: ${{ !matrix.no_coverage && needs.preconditions.outputs.collect_coverage
        == 'true' }}
      name: Upload coverage to build artifacts
      run: $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh upload_systest_coverage_files
        ${{ matrix.group }}
    - continue-on-error: true
      if: cancelled()
      name: print JVM thread dumps when cancelled
      run: $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh print_thread_dumps
    - continue-on-error: true
      if: ${{ always() }}
      name: Aggregates all test reports to ./test-reports and ./surefire-reports directories
      uses: ./.github/actions/copy-test-reports
    - continue-on-error: true
      if: ${{ always() }}
      name: Publish Test Report
      uses: apache/pulsar-test-infra/action-junit-report@master
      with:
        annotate_only: 'true'
        report_paths: test-reports/TEST-*.xml
    - continue-on-error: true
      if: ${{ !success() }}
      name: Upload container logs
      uses: actions/upload-artifact@v4
      with:
        name: System-${{ matrix.group }}-container-logs
        path: tests/integration/target/container-logs
        retention-days: 7
    - continue-on-error: true
      if: ${{ !success() }}
      name: Upload Surefire reports
      uses: actions/upload-artifact@v4
      with:
        name: System-${{ matrix.name }}-surefire-reports
        path: surefire-reports
        retention-days: 7
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    strategy:
      fail-fast: false
      matrix:
        include:
        - group: TIERED_FILESYSTEM
          name: Tiered FileSystem
        - group: TIERED_JCLOUD
          name: Tiered JCloud
        - group: FUNCTION
          name: Function
        - group: SCHEMA
          name: Schema
        - group: PULSAR_CONNECTORS_THREAD
          name: Pulsar Connectors - Thread
        - group: PULSAR_CONNECTORS_PROCESS
          name: Pulsar Connectors - Process
        - clean_disk: true
          group: PULSAR_IO
          name: Pulsar IO
    timeout-minutes: 60
  system-tests-upload-coverage:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      PULSAR_TEST_IMAGE_NAME: apachepulsar/pulsar-test-latest-version:latest
    if: ${{ needs.preconditions.outputs.collect_coverage == 'true' }}
    name: CI - System - Upload Coverage
    needs:
    - preconditions
    - system-tests
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Cache local Maven repository
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-all-${{ hashFiles('**/pom.xml') }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles(''**/pom.xml'')
          }}

          ${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Restore maven build results from Github artifact cache
      run: 'cd $HOME

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_tar_from_github_actions_artifacts
        pulsar-maven-repository-binaries

        '
    - continue-on-error: true
      name: Load docker image apachepulsar/pulsar-test-latest-version:latest from
        Github artifact cache
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh docker_load_image_from_github_actions_artifacts
        pulsar-test-latest-version-image

        '
    - continue-on-error: true
      name: Restore coverage files from build artifacts and create Jacoco reports
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_systest_coverage_files

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh create_inttest_coverage_report

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh create_test_coverage_report

        cd $GITHUB_WORKSPACE/target

        zip -qr jacoco_test_coverage_report_systests.zip jacoco_test_coverage_report
        jacoco_inttest_coverage_report || true

        '
    - continue-on-error: true
      name: Upload Jacoco report files to build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Jacoco-coverage-report-systests
        path: target/jacoco_test_coverage_report_systests.zip
        retention-days: 3
    - continue-on-error: true
      name: Upload to Codecov
      uses: ./.github/actions/upload-coverage
      with:
        flags: systests
    - continue-on-error: true
      name: Delete coverage files from build artifacts
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh delete_systest_coverage_files

        '
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    timeout-minutes: 30
  unit-tests:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
      COLLECT_COVERAGE: ${{ needs.preconditions.outputs.collect_coverage }}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
      JOB_NAME: CI - Unit - ${{ matrix.name }}
      THREAD_LEAK_DETECTOR_DIR: ${{ github.workspace }}/target/thread-leak-dumps
      THREAD_LEAK_DETECTOR_WAIT_MILLIS: ${{ github.event_name == 'workflow_dispatch'
        && github.event.inputs.thread_leak_detector_wait_millis || 10000 }}
      TRACE_TEST_RESOURCE_CLEANUP: ${{ github.event_name == 'workflow_dispatch' &&
        github.event.inputs.trace_test_resource_cleanup || 'off' }}
      TRACE_TEST_RESOURCE_CLEANUP_DIR: ${{ github.workspace }}/target/trace-test-resource-cleanup
    if: ${{ needs.preconditions.outputs.docs_only != 'true' }}
    name: CI - Unit - ${{ matrix.name }}
    needs:
    - preconditions
    - build-and-license-check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ env.TRACE_TEST_RESOURCE_CLEANUP != 'off' }}
      name: Clean Disk when tracing test resource cleanup
      uses: ./.github/actions/clean-disk
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Cache Maven dependencies
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles('**/pom.xml')
          }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ matrix.jdk || env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ matrix.jdk || env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Restore maven build results from Github artifact cache
      run: 'cd $HOME

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_tar_from_github_actions_artifacts
        pulsar-maven-repository-binaries

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh snapshot_pulsar_maven_artifacts

        '
    - continue-on-error: true
      name: Run setup commands
      run: '${{ matrix.setup }}

        '
    - continue-on-error: true
      name: Run unit test group '${{ matrix.group }}'
      run: 'CHANGED_TESTS="${{ needs.preconditions.outputs.tests_files }}" ./build/run_unit_group.sh
        ${{ matrix.group }}

        '
    - continue-on-error: true
      if: ${{ needs.preconditions.outputs.collect_coverage == 'true' }}
      name: Upload coverage to build artifacts
      run: $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh upload_unittest_coverage_files
        ${{ matrix.group }}
    - continue-on-error: true
      if: cancelled()
      name: print JVM thread dumps when cancelled
      run: $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh print_thread_dumps
    - continue-on-error: true
      if: ${{ always() }}
      name: Aggregates all test reports to ./test-reports and ./surefire-reports directories
      uses: ./.github/actions/copy-test-reports
    - continue-on-error: true
      if: ${{ always() }}
      name: Publish Test Report
      uses: apache/pulsar-test-infra/action-junit-report@master
      with:
        annotate_only: 'true'
        report_paths: test-reports/TEST-*.xml
    - continue-on-error: true
      if: ${{ always() }}
      name: Report detected thread leaks
      run: "if [ -d \"$THREAD_LEAK_DETECTOR_DIR\" ]; then\n  cd \"$THREAD_LEAK_DETECTOR_DIR\"\
        \n  cat threadleak*.txt | awk '/^Summary:/ {print \"::warning::\" $0 \"\\\
        n\"; next} {print}'\nfi\n"
    - continue-on-error: true
      if: ${{ !success() || env.TRACE_TEST_RESOURCE_CLEANUP != 'off' }}
      name: Upload Surefire reports
      uses: actions/upload-artifact@v4
      with:
        name: Unit-${{ matrix.group }}-surefire-reports
        path: surefire-reports
        retention-days: 7
    - continue-on-error: true
      if: ${{ always() }}
      name: Upload possible heap dump, core dump or crash files
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: ignore
        name: Unit-${{ matrix.group }}-dumps
        path: '/tmp/*.hprof

          **/hs_err_*.log

          **/core.*

          ${{ env.TRACE_TEST_RESOURCE_CLEANUP_DIR }}/*

          ${{ env.THREAD_LEAK_DETECTOR_DIR }}/*

          '
        retention-days: 7
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    strategy:
      fail-fast: false
      matrix:
        include:
        - group: OTHER
          name: Other
          timeout: 75
        - group: BROKER_GROUP_1
          name: Brokers - Broker Group 1
        - group: BROKER_GROUP_2
          name: Brokers - Broker Group 2
        - group: BROKER_GROUP_3
          name: Brokers - Broker Group 3
        - group: BROKER_GROUP_4
          name: Brokers - Broker Group 4
        - group: BROKER_CLIENT_API
          name: Brokers - Client Api
        - group: BROKER_CLIENT_IMPL
          name: Brokers - Client Impl
        - group: PROXY
          name: Proxy
        - group: PULSAR_IO
          name: Pulsar IO
          timeout: 75
        - group: PULSAR_IO_ELASTIC
          name: Pulsar IO - Elastic Search
        - group: PULSAR_IO_KAFKA_CONNECT
          name: Pulsar IO - Kafka Connect Adaptor
        - group: CLIENT
          name: Pulsar Client
        - group: METADATA
          name: Pulsar Metadata
    timeout-minutes: ${{ matrix.timeout || 60 }}
  unit-tests-upload-coverage:
    env:
      CI_JDK_MAJOR_VERSION: ${{ needs.preconditions.outputs.jdk_major_version }}
    if: ${{ needs.preconditions.outputs.collect_coverage == 'true' }}
    name: CI - Unit - Upload Coverage
    needs:
    - preconditions
    - unit-tests
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Tune Runner VM
      uses: ./.github/actions/tune-runner-vm
    - continue-on-error: true
      if: ${{ github.repository != 'apache/pulsar' && github.event_name == 'pull_request'
        }}
      name: Setup ssh access to build runner VM
      uses: ./.github/actions/ssh-access
      with:
        limit-access-to-actor: true
    - continue-on-error: true
      name: Cache Maven dependencies
      timeout-minutes: 5
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-m2-dependencies-core-modules-${{ hashFiles('**/pom.xml')
          }}
        path: '~/.m2/repository/*/*/*

          !~/.m2/repository/org/apache/pulsar

          '
        restore-keys: '${{ runner.os }}-m2-dependencies-core-modules-

          '
    - continue-on-error: true
      name: Set up JDK ${{ matrix.jdk || env.CI_JDK_MAJOR_VERSION }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ env.JDK_DISTRIBUTION }}
        java-version: ${{ matrix.jdk || env.CI_JDK_MAJOR_VERSION }}
    - continue-on-error: true
      name: Install gh-actions-artifact-client.js
      uses: apache/pulsar-test-infra/gh-actions-artifact-client/dist@master
    - continue-on-error: true
      name: Restore maven build results from Github artifact cache
      run: 'cd $HOME

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_tar_from_github_actions_artifacts
        pulsar-maven-repository-binaries

        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh snapshot_pulsar_maven_artifacts

        '
    - continue-on-error: true
      name: Restore coverage files from build artifacts and create Jacoco reports
      run: "$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh restore_unittest_coverage_files\n\
        $GITHUB_WORKSPACE/build/pulsar_ci_tool.sh create_test_coverage_report \ncd\
        \ $GITHUB_WORKSPACE/target\nzip -qr jacoco_test_coverage_report_unittests.zip\
        \ jacoco_test_coverage_report || true\n"
    - continue-on-error: true
      name: Upload Jacoco report files to build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Jacoco-coverage-report-unittests
        path: target/jacoco_test_coverage_report_unittests.zip
        retention-days: 3
    - continue-on-error: true
      name: Upload to Codecov
      uses: ./.github/actions/upload-coverage
      with:
        flags: unittests
    - continue-on-error: true
      name: Delete coverage files from build artifacts
      run: '$GITHUB_WORKSPACE/build/pulsar_ci_tool.sh delete_unittest_coverage_files

        '
    - continue-on-error: true
      if: ${{ failure() && github.repository != 'apache/pulsar' && github.event_name
        == 'pull_request' }}
      name: Wait for ssh connection when build fails
      uses: ./.github/actions/ssh-access
      with:
        action: wait
    timeout-minutes: 30
name: Pulsar CI
on:
  repository_dispatch:
    types: trigger-ga___pulsar-ci.yaml
